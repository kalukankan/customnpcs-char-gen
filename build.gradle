apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

// バージョン
version = '1.11.2.0'

// エンコーディング
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

// ソースと実行ファイルのJava バージョン
def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

mainClassName = 'com.google.kalukankan.ccg.Application'

jar.baseName = project.name

repositories {
    jcenter()
    // mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

// eclipse プロジェクトの設定
import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {

    // .classpath の設定
    classpath {
        // 依存している jar の source と javadoc をダウンロードする
        downloadSources = true    // デフォルトは false
        downloadJavadoc = true    // javadoc のパスは絶対パスになる

        file {
            // 出力パスを gradle のデフォルトに合わせる
            whenMerged { classpath ->
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java")      }*.output = "build/classes/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "build/resources/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java")      }*.output = "build/classes/test"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"
                //classpath.entries.removeAll { it.kind == "output" }
            }
        }
    }
}

// 成果物にファイル追加 (src/dist 以下に配置したものは自動的に追加されるが、それ以外を追加)
distZip {
	into(project.name + "-" + version + "/bin") {
	    from ('src/main/resources') {
	    	include '*'
	    }
    }
}

// バッチにクラスパス追加 (startScripts.classpath.add(files('$APP_HOME/conf')) だと %APP_HOME%/lib/conf になってしまうため、プレースホルダー追加後に置換)
startScripts {
  classpath = files('src/dist/XxxAPlaceHolderForAConfigxxX') + classpath
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile    = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\XxxAPlaceHolderForAConfigxxX', '%APP_HOME%\\bin')
    unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/XxxAPlaceHolderForAConfigxxX', '$APP_HOME/bin')
  }
}